{"version":3,"sources":["Components/Directions.js","Components/Map.js","Components/Input.js","Components/Stations.js","App.js","serviceWorker.js","index.js"],"names":["Directions","props","origin","destination","waypoints","count","useRef","useEffect","current","window","google","maps","DirectionsService","route","travelMode","result","status","DirectionsStatus","OK","setDir","console","log","directions","Map","useState","setDirections","avgLatLng","setAvgLatLng","duration","setDuration","distance","setDistance","googleMapsApiKey","process","mapContainerStyle","width","height","zoom","center","lat","lng","nearbyStations","map","stat","position","info","location","latitude","longitude","label","price","toString","onClick","stationSelectedHandler","mapStart","mapDest","dirs","routes","bounds","Za","Va","tmpStations","i","stations","length","j","prices","stationcode","code","fueltype","fuelType","totalDuration","totalDistance","k","legs","value","toFixed","push","lastupdated","sort","a","b","nearbyStationsHandler","selected","className","Input","type","placeholder","name","start","onChange","inputChangedHandler","dest","defaultValue","submitHandler","Stations","station","trigger","onOpening","address","App","event","target","setState","state","nearby","accessToken","apiKey","transaction","fetch","then","response","json","access_token","client_id","this","Date","toLocaleString","fuelLeft","accesstoken","apikey","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","async","defer","src","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.60af3a34.chunk.js","sourcesContent":["//Code adapted from react-google-maps repository from NPM\n//https://www.npmjs.com/package/@react-google-maps/api\n\nimport React, { useEffect, useRef } from 'react';\nimport { DirectionsRenderer } from '@react-google-maps/api';\n\nconst Directions = props => {\n  //define route variables and count\n  const { origin, destination, waypoints } = props;\n  const count = useRef(0);\n\n  //reset the count to 0 after every component re-render\n  useEffect(() => {\n    count.current = 0;\n  }, [origin, destination, waypoints]);\n\n  //make a call to Google Maps API using DirectionsService to get a route\n  const directionsService = new window.google.maps.DirectionsService()\n  directionsService.route({\n    origin,\n    destination,\n    travelMode: 'DRIVING',\n    waypoints,\n  }, function (result, status) {\n    if (status === window.google.maps.DirectionsStatus.OK && count.current === 0) {\n      //Directions will only be updated after the first render of the component\n      count.current += 1;\n      props.setDir(result);\n    } else {\n      console.log('Directions request failed due to ' + status);\n    }\n  });\n\n  //return directions object to DirectionsRenderer to display on Map\n  return (\n    <>\n      {props.directions && (\n        <DirectionsRenderer directions={props.directions} />\n      )}\n    </>\n  );\n}\n\nexport default Directions;","//Code adapted from react-google-maps repository from NPM\n//https://www.npmjs.com/package/@react-google-maps/api\n\nimport React, { useState } from 'react';\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';\nimport Directions from './Directions.js'\nimport './Map.css';\n\nexport default function Map(props) {\n  const [directions, setDirections] = useState();\n  const [avgLatLng, setAvgLatLng] = useState();\n  const [duration, setDuration] = useState();\n  const [distance, setDistance] = useState();\n\n  function directionsChangedHandler(dirs) {\n    console.log(dirs);\n    setDirections(dirs);\n\n    setAvgLatLng({\n      lat: (dirs.routes[0].bounds.Za[\"j\"] + 0.01), \n      lng: (dirs.routes[0].bounds.Va[\"i\"])\n    });\n\n    //check stations within bounds\n    let tmpStations = [];\n    for (var i = 0; i < props.stations.length; i++){\n      //check if latitude and longitude of a station are within bounds\n      if (dirs.routes[0].bounds.Va[\"i\"] <= props.stations[i.toString()].location.longitude && \n        props.stations[i.toString()].location.longitude <= dirs.routes[0].bounds.Va[\"j\"] && \n        dirs.routes[0].bounds.Za[\"i\"] <= props.stations[i.toString()].location.latitude && \n        props.stations[i.toString()].location.latitude <= dirs.routes[0].bounds.Za[\"j\"]){\n        //find corresponding prices for each station by matching station code and fuel type\n        for (var j = 0; j < props.prices.length; j++){\n          if (props.prices[j.toString()].stationcode === props.stations[i.toString()].code && \n          props.prices[j.toString()].fueltype === props.fuelType){\n            //calculate journey duration + distance\n            var totalDuration = 0;\n            var totalDistance = 0;\n            //get total distance and duration in metres and seconds, respectively,\n            //by adding the distance and duration for each leg of the journey\n            for (var k = 0; k < dirs.routes[0].legs.length; k++){\n              totalDuration += dirs.routes[0].legs[k].duration.value;\n              totalDistance += dirs.routes[0].legs[k].distance.value;\n            }\n            //set duration and distance in minutes and kilometres, and round numbers accordingly\n            setDuration((totalDuration/60).toFixed(0));\n            setDistance((totalDistance/1000).toFixed(1));\n\n            tmpStations.push({\n              \"info\": props.stations[i.toString()], \n              \"price\": props.prices[j.toString()].price, \n              \"lastupdated\":props.prices[j.toString()].lastupdated\n            }); \n          }\n        }\n      }\n    }\n    //sort by price using a callback funciton\n    tmpStations.sort(function(a, b){\n      //returning 1 indicates that b is smaller than a\n      if (a.price > b.price) return 1;\n      //returning -1 indicates that a is smaller than b\n      else return -1;\n    })\n    props.nearbyStationsHandler(tmpStations);\n  }\n\n  return (\n    <LoadScript\n      googleMapsApiKey = {process.env.REACT_APP_GOOGLEMAPS_API_KEY}\n    >\n      <GoogleMap\n        mapContainerStyle={{width: '100vw', height: '60vh'}}\n        zoom={15}\n        center={{lat: -34.123, lng: 150.342}}\n      >\n        { props.nearbyStations != null && props.nearbyStations.map((stat) => \n          <Marker \n            position={{lat: stat.info.location.latitude, lng: stat.info.location.longitude}}\n            label={stat.price.toString()}\n            onClick={() => props.stationSelectedHandler(stat)}\n          />\n        )}\n\n        { props.mapStart !== null && props.mapDest !== null && (\n          <Directions\n            origin = {props.mapStart}\n            destination = {props.mapDest}\n            directions = {directions}\n            setDir = {directionsChangedHandler}\n            waypoints = {props.selected}\n          />\n        )}\n\n        {props.selected && (\n           <InfoWindow position={avgLatLng}>\n            <div className=\"InfoWindow\">\n              <p>Distance: {distance}km</p>\n              <p>Duration: {duration} minutes</p>\n            </div>\n         </InfoWindow>\n        )}\n      </GoogleMap>\n    </LoadScript>\n  )\n}","import React from 'react';\nimport './Input.css';\n\nexport default function Input(props) {\n  return (\n    <div className=\"Input\">\n      <input className=\"start\" type=\"text\" placeholder=\"Choose a starting location...\" name=\"start\" value={props.start} onChange={props.inputChangedHandler}/>\n      <input className=\"dest\" type=\"text\" placeholder=\"Choose a destination...\" name=\"dest\" value={props.dest} onChange={props.inputChangedHandler}/>\n      <p>Fuel Type: \n      <select className=\"fuelType\" name=\"fuelType\" defaultValue={props.fuelType} onChange={props.inputChangedHandler}>\n        <option value=\"PDL\">Diesel</option>\n        <option value=\"U91\">Unleaded 91</option>\n        <option value=\"P98\">Petroleum 98</option>\n        <option value=\"E10\">Ethanol</option>\n      </select>\n      <button className=\"submit\" onClick={props.submitHandler}>Submit</button>\n      </p>\n    </div>\n  )\n}","import React from 'react';\nimport Collapsible from 'react-collapsible';\nimport './Stations.css';\n\nexport default function Stations(props) {\n  //define empty stations object\n  let stations = null;\n\n  //check for nearby stations\n  if(props.nearbyStations === null){\n    //display error message\n    stations = <p>No nearby stations for the specified route.</p>\n  } else {\n    //map each nearby station to a Collapsible component for rendering\n    stations = props.nearbyStations.map((station) =>\n      <Collapsible \n        trigger={station.info.name + \": $\" + station.price}\n        onOpening={() => props.stationSelectedHandler(station)}\n      >\n        <p><b>Address:</b> {station.info.address}</p>\n        <p><em>Last updated {station.lastupdated}</em></p>\n      </Collapsible>\n    )}\n\n  //render stations\n  return (\n    <div className=\"Stations\">\n      <h1>Nearby Stations</h1>\n      {stations}\n    </div>\n  )\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Map from './Components/Map.js'\nimport Input from './Components/Input.js'\nimport Stations from './Components/Stations';\n\nclass App extends Component{\n  //define the state\n  constructor(props) {\n    super(props);\n    this.state = {\n      start: \"\",\n      dest: \"\",\n      fuelType: \"PDL\",\n      stations: [],\n      prices: [],\n      mapStart: null,\n      mapDest: null,\n      accessToken: null,\n      apiKey: null,\n      transaction: 0,\n      nearbyStations: null\n    }\n  }\n\n  //retrieve station and price data\n  async componentDidMount() {\n    //GET request for API credentials using fetch\n    await fetch(\"https://api.onegov.nsw.gov.au/oauth/client_credential/accesstoken?grant_type=client_credentials\", {\n      \"async\": true,\n      \"crossDomain\": true,\n      \"method\": \"GET\",\n      \"headers\": {\n        \"authorization\": process.env.REACT_APP_FUEL_AUTH\n      }\n    })\n      //format request into JS object\n      .then(response => response.json())\n      //update state\n      .then(json => this.setState({\n        accessToken: json.access_token,\n        apiKey: json.client_id,\n        transaction: this.state.transaction + 1\n      }))\n      \n    // GET request for station information using fetch\n    await fetch(\"https://api.onegov.nsw.gov.au/FuelPriceCheck/v1/fuel/prices\", {\n      \"async\": true,\n      \"crossDomain\": true,\n      \"method\": \"GET\",\n      \"headers\": {\n        \"authorization\": \"Bearer \" + this.state.accessToken,\n        \"apikey\": this.state.apiKey,\n        \"transactionid\": 1,\n        \"requesttimestamp\": new Date().toLocaleString()\n      }\n    })\n      //format request into JS object\n      .then(response => response.json())\n      //update state\n      .then(json => this.setState({\n        stations: json.stations,\n        prices: json.prices\n      }))\n      .then(() => console.log(this.state.stations[0], this.state.prices[0]))\n  }\n\n  //handle input (start, destination, fuel type) change\n  inputChangedHandler = (event) => {\n    let {name, value} = event.target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  //handle submit button pressed\n  submitHandler = (event) => {\n    //update map state\n    this.setState({\n      mapStart: this.state.start,\n      mapDest: this.state.dest\n    });\n  }\n\n  //handle station marker clicked or station collapsible selected\n  stationSelectedHandler = (stat) => {\n    this.setState({\n      selected: [{\n        location: {\n          lat: stat.info.location.latitude,\n          lng: stat.info.location.longitude\n        }\n      }]\n    })\n  }\n\n  //handle nearby stations update\n  nearbyStationsHandler = (nearby) => {\n    this.setState({nearbyStations: nearby});\n  }\n\n  //render components onto the screen, passing in corresponding state values and event handlers\n  render(){\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\">Petrol Watch</h1>\n        <Input \n          inputChangedHandler = {this.inputChangedHandler}\n          submitHandler = {this.submitHandler}\n          start={this.state.start}\n          dest={this.state.dest}\n          fuelType={this.state.fuelType}\n          fuelLeft={this.state.fuelLeft}  \n        />\n\n        <Map \n          mapStart={this.state.mapStart}\n          mapDest={this.state.mapDest}\n          stations={this.state.stations}\n          prices={this.state.prices}\n          fuelType={this.state.fuelType}\n          accesstoken={this.state.accesstoken}\n          apikey={this.state.apikey}\n          stationSelectedHandler={this.stationSelectedHandler}\n          selected = {this.state.selected}\n          nearbyStationsHandler={this.nearbyStationsHandler}\n          nearbyStations = {this.state.nearbyStations}\n        />\n\n        <Stations \n          inputChangedHandler={this.inputChangedHandler}\n          submitHandler={this.submitHandler}\n          stationSelectedHandler={this.stationSelectedHandler}\n          start={this.state.start}\n          dest={this.state.dest}\n          fuelType={this.state.fuelType}\n          selected = {this.state.selected}\n          nearbyStations={this.state.nearbyStations}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    \n    <App />\n    <script async defer\n      src={\"https://maps.googleapis.com/maps/api/js?key=\" + process.env.REACT_APP_GOOGLEMAPS_API_KEY + \"&callback=initMap\"}>\n    </script>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}